services:
  mqtt:
    image: eclipse-mosquitto:2
    container_name: tars-mqtt
    network_mode: host
    env_file: .env
    volumes:
      - ./ops/mosquitto-data:/mosquitto/data
      - ./ops/mosquitto-config:/mosquitto/config
    # Use image default entrypoint to run mosquitto with the mounted config
    restart: unless-stopped

  stt:
    build: ./apps/stt-worker
    container_name: tars-stt
    network_mode: host
    env_file: .env
    depends_on:
      - mqtt
    devices:
      - /dev/snd:/dev/snd
    volumes:
      - /run/user/1000/pulse:/run/user/1000/pulse:ro
      - ./models/whisper:/host-models
      - /tmp/tars:/tmp/tars
    environment:
      # Broker URL assembled from global creds/host/port
      - MQTT_URL=mqtt://$MQTT_USER:$MQTT_PASS@$MQTT_HOST:$MQTT_PORT
      # Whisper model and logging
      - WHISPER_MODEL=${WHISPER_MODEL:-small}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Backend selection and remote WS URL (if STT_BACKEND=ws)
      - STT_BACKEND=${STT_BACKEND:-whisper}
      - WS_URL=${WS_URL:-ws://127.0.0.1:9000/stt}
      - PULSE_RUNTIME_PATH=/run/user/1000/pulse
      - PULSE_SERVER=unix:/run/user/1000/pulse/native
      # Audio/VAD
      - SILENCE_THRESHOLD_MS=${SILENCE_THRESHOLD_MS:-600}
      - CHUNK_DURATION_MS=${CHUNK_DURATION_MS:-20}
      - VAD_AGGRESSIVENESS=${VAD_AGGRESSIVENESS:-3}
      - SAMPLE_RATE=${SAMPLE_RATE:-16000}
      - AUDIO_FANOUT_PATH=${WAKE_AUDIO_FANOUT:-/tmp/tars/audio-fanout.sock}
      - FFT_PUBLISH=${FFT_PUBLISH:-1}
      - FFT_RATE_HZ=${FFT_RATE_HZ:-12}
      - FFT_BINS=${FFT_BINS:-64}
      - FFT_LOG_SCALE=${FFT_LOG_SCALE:-1}
      - FFT_WS_ENABLE=${FFT_WS_ENABLE:-0}
      - FFT_WS_HOST=${FFT_WS_HOST:-0.0.0.0}
      - FFT_WS_PORT=${FFT_WS_PORT:-8765}
      - FFT_WS_PATH=${FFT_WS_PATH:-/fft}

  wake-activation:
    build:
      context: .
      dockerfile: apps/wake-activation/Dockerfile
    container_name: tars-wake-activation
    network_mode: host
    env_file: .env
    depends_on:
      - mqtt
      - stt
    volumes:
      - ./models/openwakeword:/models/openwakeword:ro
      - /tmp/tars:/tmp/tars
    environment:
      - MQTT_URL=mqtt://$MQTT_USER:$MQTT_PASS@$MQTT_HOST:$MQTT_PORT
      - WAKE_AUDIO_FANOUT=${WAKE_AUDIO_FANOUT:-/tmp/tars/audio-fanout.sock}
      - WAKE_MODEL_PATH=${WAKE_MODEL_PATH:-/models/openwakeword/hey_tars.tflite}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    restart: unless-stopped

  router:
    build: ./apps/router
    container_name: tars-router
    network_mode: host
    env_file: .env
    depends_on:
      - mqtt
    environment:
      # Broker URL assembled from global creds/host/port
      - MQTT_URL=mqtt://$MQTT_USER:$MQTT_PASS@$MQTT_HOST:$MQTT_PORT
      # Optional label for runtime profile
      - PROFILE=offline_fast
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # LLM -> TTS bridge controls
      - ROUTER_LLM_TTS_STREAM=${ROUTER_LLM_TTS_STREAM:-1}
      - TOPIC_LLM_STREAM=${TOPIC_LLM_STREAM:-llm/stream}
      - TOPIC_LLM_RESPONSE=${TOPIC_LLM_RESPONSE:-llm/response}
      - TOPIC_LLM_CANCEL=${TOPIC_LLM_CANCEL:-llm/cancel}
      - TOPIC_TTS_SAY=${TOPIC_TTS_SAY:-tts/say}
      - ROUTER_STREAM_MIN_CHARS=${STREAM_MIN_CHARS:-60}
      - ROUTER_STREAM_MAX_CHARS=${STREAM_MAX_CHARS:-240}
      - ROUTER_STREAM_BOUNDARY_CHARS=${STREAM_BOUNDARY_CHARS:-.!?;:}
    restart: unless-stopped

  tts:
    build: ./apps/tts-worker
    container_name: tars-tts
    network_mode: host
    env_file: .env
    devices:
      - /dev/snd:/dev/snd
    depends_on:
      - mqtt
    volumes:
      - ./apps/tts-worker/voices:/voice-models:ro
      - /run/user/1000/pulse:/run/user/1000/pulse:ro
    environment:
      # Broker URL assembled from global creds/host/port
      - MQTT_URL=mqtt://$MQTT_USER:$MQTT_PASS@$MQTT_HOST:$MQTT_PORT
      # Piper voice selection
      - PIPER_VOICE=/voices/TARS.onnx
      - PULSE_RUNTIME_PATH=/run/user/1000/pulse
      - PULSE_SERVER=unix:/run/user/1000/pulse/native
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Streaming/pipeline controls for TTS
      - TTS_STREAMING=${TTS_STREAMING:-0}
      - TTS_PIPELINE=${TTS_PIPELINE:-1}
      # External provider (optional; set in .env, not here)
      # This service already uses env_file: .env, so you can configure these
      # directly in your .env. No need to uncomment or add them here.
      # Examples of .env keys (see .env.example):
      # TTS_PROVIDER=elevenlabs
      # ELEVEN_API_KEY=...
      # ELEVEN_VOICE_ID=...
      # ELEVEN_MODEL_ID=eleven_multilingual_v2
      # ELEVEN_OPTIMIZE_STREAMING=0
    restart: unless-stopped

  ui:
    build: ./apps/ui
    container_name: tars-ui
    network_mode: host
    profiles: ["pygame"]
    environment:
      # Broker URL assembled from global creds/host/port
      - MQTT_URL=mqtt://$MQTT_USER:$MQTT_PASS@$MQTT_HOST:$MQTT_PORT
      # Optional TOML config mount path
      - UI_CONFIG=/config/ui.toml
      - DISPLAY=${DISPLAY}
      - SDL_VIDEODRIVER=x11
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ./apps/ui/ui.toml:/config/ui.toml:ro

  ui-web:
    build: ./apps/ui-web
    container_name: tars-ui-web
    network_mode: host
    environment:
      # Broker URL assembled from global creds/host/port
      - MQTT_URL=mqtt://$MQTT_USER:$MQTT_PASS@$MQTT_HOST:$MQTT_PORT
    depends_on:
      - mqtt
    restart: unless-stopped

  memory:
    build: ./apps/memory-worker
    container_name: tars-memory
    network_mode: host
    env_file: .env
    environment:
      - MQTT_URL=mqtt://$MQTT_USER:$MQTT_PASS@$MQTT_HOST:$MQTT_PORT
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MEMORY_DIR=/data
      - MEMORY_FILE=${MEMORY_FILE:-memory.pickle.gz}
      - RAG_STRATEGY=${RAG_STRATEGY:-hybrid}
      - MEMORY_TOP_K=${MEMORY_TOP_K:-5}
      - TOPIC_MEMORY_QUERY=${TOPIC_MEMORY_QUERY:-memory/query}
      - TOPIC_MEMORY_RESULTS=${TOPIC_MEMORY_RESULTS:-memory/results}
      # Character config
      - CHARACTER_NAME=${CHARACTER_NAME:-TARS}
      - CHARACTER_DIR=${CHARACTER_DIR:-/config/characters}
      - TOPIC_CHARACTER_GET=${TOPIC_CHARACTER_GET:-character/get}
      - TOPIC_CHARACTER_RESULT=${TOPIC_CHARACTER_RESULT:-character/result}
      - TOPIC_CHARACTER_CURRENT=${TOPIC_CHARACTER_CURRENT:-system/character/current}
    volumes:
      - ./data/memory:/data
      # Persist model cache to speed up rebuilds
      - ./data/model_cache:/data/model_cache
      # Optional character TOML mount, if available
      - ./apps/voice/characters:/config/characters:ro
    depends_on:
      - mqtt
    restart: unless-stopped

  llm:
    build: ./apps/llm-worker
    container_name: tars-llm
    network_mode: host
    env_file: .env
    environment:
      - MQTT_URL=mqtt://$MQTT_USER:$MQTT_PASS@$MQTT_HOST:$MQTT_PORT
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - LLM_MODEL=${LLM_MODEL:-gpt-4o-mini}
      - LLM_MAX_TOKENS=${LLM_MAX_TOKENS:-256}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE:-0.7}
      - LLM_TOP_P=${LLM_TOP_P:-1.0}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL}
      - RAG_ENABLED=${RAG_ENABLED:-0}
      - RAG_TOP_K=${RAG_TOP_K:-5}
      - TOPIC_LLM_REQUEST=${TOPIC_LLM_REQUEST:-llm/request}
      - TOPIC_LLM_RESPONSE=${TOPIC_LLM_RESPONSE:-llm/response}
      - TOPIC_MEMORY_QUERY=${TOPIC_MEMORY_QUERY:-memory/query}
      - TOPIC_MEMORY_RESULTS=${TOPIC_MEMORY_RESULTS:-memory/results}
      - TOPIC_HEALTH=${TOPIC_HEALTH:-system/health/llm}
    depends_on:
      - mqtt
    restart: unless-stopped
