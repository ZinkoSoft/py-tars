#!/bin/bash
#
# Configure WiFi credentials and upload to ESP32
#

DEVICE="/dev/ttyACM0"

echo "=========================================="
echo "TARS WiFi Configuration"
echo "=========================================="
echo ""

# Prompt for WiFi credentials
read -p "Enter WiFi SSID: " WIFI_SSID
read -sp "Enter WiFi Password: " WIFI_PASSWORD
echo ""
echo ""

# Optional: AP configuration
read -p "Configure Access Point fallback? (y/n) [default: y]: " CONFIGURE_AP
CONFIGURE_AP=${CONFIGURE_AP:-y}

if [[ "$CONFIGURE_AP" =~ ^[Yy]$ ]]; then
    read -p "Enter AP SSID [default: TARS-Servo]: " AP_SSID
    AP_SSID=${AP_SSID:-TARS-Servo}
    read -sp "Enter AP Password [default: tars1234]: " AP_PASSWORD
    AP_PASSWORD=${AP_PASSWORD:-tars1234}
    echo ""
    echo ""
else
    AP_SSID="TARS-Servo"
    AP_PASSWORD="tars1234"
fi

# Create wifi_config.py with user settings
cat > wifi_config.py << EOF
"""
WiFi Configuration for TARS Servo Controller
Auto-generated by configure_wifi.sh
"""

# WiFi Credentials
WIFI_SSID = "$WIFI_SSID"
WIFI_PASSWORD = "$WIFI_PASSWORD"

# Web Server Configuration
WEB_PORT = 80
WEB_TIMEOUT = 30  # seconds

# Access Point Mode (fallback if WiFi connection fails)
AP_SSID = "$AP_SSID"
AP_PASSWORD = "$AP_PASSWORD"
AP_ENABLED = True  # Set to False to disable AP fallback
EOF

echo "Configuration saved to wifi_config.py"
echo ""
echo "Uploading to ESP32..."

if mpremote connect "$DEVICE" fs cp wifi_config.py : 2>/dev/null; then
    echo "✓ WiFi configuration uploaded successfully!"
    echo ""
    echo "Configuration:"
    echo "  WiFi SSID: $WIFI_SSID"
    echo "  AP SSID: $AP_SSID"
    echo ""
    echo "Start the web server:"
    echo "  mpremote connect $DEVICE exec 'import main'"
else
    echo "✗ Failed to upload configuration"
    echo ""
    echo "Manual upload:"
    echo "  mpremote connect $DEVICE fs cp wifi_config.py :"
    exit 1
fi

echo "=========================================="
