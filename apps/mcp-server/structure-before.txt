# MCP-Server Structure Before Migration

**Date**: 2025-10-13  
**Phase**: Phase 8b - Task T110-T123  
**Service**: mcp-server

---

## Current Structure

```
apps/mcp-server/
├── tars_mcp_server/
│   ├── __init__.py               # Empty docstring only
│   ├── __main__.py               # Entry point with main()
│   └── server.py                 # FastMCP app with tools
└── pyproject.toml                # Build config (flat layout)

```

**Total source files**: 3 Python files  
**Total lines**: ~220 lines

---

## Current Layout

### Flat Structure
- Package: `tars_mcp_server/` (flat, no src/)
- Entry point: `tars_mcp_server.__main__:main`
- No tests directory
- No Makefile
- No README.md
- No .env.example
- No py.typed marker

### pyproject.toml Configuration
- **Layout**: Flat (no `package-dir`)
- **Entry point**: `tars-mcp-server = "tars_mcp_server.__main__:main"`
- **Dependencies**: mcp[cli], pydantic, orjson, python-dotenv, asyncio-mqtt, tars-core
- **Dev dependencies**: pytest, ruff, mypy, types-orjson

---

## Service Purpose

**MCP Server for TARS Character Management**

Provides MCP tools for TARS to:
1. Adjust personality traits dynamically
2. Query current trait values
3. Reset traits to defaults

Published via FastMCP with stdio/HTTP/SSE transports.

---

## Key Components

### server.py
- **FastMCP app**: `app = FastMCP("TARS Character Manager")`
- **Tools**:
  - `adjust_personality_trait(trait_name: str, new_value: int)` - Update trait
  - `get_current_traits()` - Query current values
  - `reset_all_traits()` - Reset to defaults
- **MQTT integration**: Publishes to `character/update` and `character/get`
- **Contracts**: Uses tars.contracts.v1.memory types

### __main__.py
- Imports `app` from `server.py`
- Calls `app.run()` (FastMCP CLI handles stdio/http/sse)

---

## MQTT Topics

### Published
- `character/update` (QoS 1) - Trait updates and resets
- `character/get` (QoS 1) - Query requests

### Contracts Used
- `CharacterTraitUpdate` - Trait change payload
- `CharacterResetTraits` - Reset request
- `CharacterGetRequest` - Query request
- `Envelope` - MQTT envelope wrapper

---

## Missing Components

### No Tests
- No tests/ directory
- No unit tests for tools
- No contract tests for MQTT payloads
- No integration tests

### No Development Tooling
- No Makefile with standard targets
- No conftest.py for fixtures
- No .env.example for configuration docs

### No Documentation
- No README.md with tool descriptions
- No .env.example with environment variables
- No examples of MCP tool usage

### No Type Marker
- No src/tars_mcp_server/py.typed for mypy

---

## Environment Variables

**Used but not documented**:
- `MQTT_URL` (default: `mqtt://tars:pass@mqtt:1883`)
- `TOPIC_CHARACTER_UPDATE` (default: `character/update`)
- `LOG_LEVEL` (default: `INFO`)

---

## Code Quality Status

### Type Safety
- Not verified with mypy
- Return types annotated (dict[str, Any])
- Input types annotated

### Exception Handling
- Broad try/except blocks
- Proper logging with exc_info=True

### Validation
- Manual trait name validation (set of valid_traits)
- Manual value range validation (0-100)

---

## Integration Points

### Memory-Worker
- Publishes trait updates to `character/update`
- Memory-worker processes and updates character state
- Memory-worker publishes to `system/character/current` (retained)

### TARS Core Contracts
- Uses `tars.contracts.v1.memory` types
- Uses `tars.contracts.envelope.Envelope` wrapper

---

## Known Limitations

### Request-Response Pattern
- `get_current_traits()` uses `asyncio.sleep(0.5)` instead of proper correlation
- No Future-based response handling
- No timeout for MQTT responses

### Trait Management
- Hardcoded list of 18 valid traits
- Could use shared contract/enum

---

## Migration Plan

### T111-T113: Source Layout
- Create `src/tars_mcp_server/` directory
- Move all source files to `src/tars_mcp_server/`
- Entry point stays `tars_mcp_server.__main__:main`

### T114-T115: Tests
- Create `tests/unit/` for tool tests
- Create `tests/contract/` for MQTT payload tests
- Create `tests/conftest.py` with MQTT mock fixtures

### T116: pyproject.toml
- Update to src/ layout: `package-dir = {"": "src"}`
- Keep existing dependencies

### T117-T119: Development Tooling
- Create Makefile with standard targets
- Create README.md with tool documentation
- Create .env.example with all environment variables

### T120: Validation
- Run `make check` (fmt + lint + test)
- Verify mypy passes
- Verify entry point works

### T121-T122: Docker (if applicable)
- Check if mcp-server has Dockerfile
- Update for src/ layout if needed

### T123: Documentation
- Create structure-after.txt

---

## Next Steps

1. Create src/ directory structure (T111-T113)
2. Organize tests (T114-T115)
3. Update build configuration (T116)
4. Add development tooling (T117-T119)
5. Validate and document (T120-T123)

---

**Status**: Ready for migration. Service is small (3 files), well-typed, uses FastMCP framework.
