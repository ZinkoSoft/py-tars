# MCP-Server Structure After Migration

**Date**: 2025-10-13  
**Phase**: Phase 8b - Task T110-T123  
**Service**: mcp-server

---

## Structure

```
apps/mcp-server/
├── src/
│   └── tars_mcp_server/
│       ├── __init__.py               # Package docstring
│       ├── __main__.py               # Entry point (calls app.run())
│       ├── server.py                 # FastMCP app with tools
│       └── py.typed                  # Type checking marker
├── tests/
│   ├── __init__.py
│   ├── conftest.py                   # Shared fixtures (MQTT mocks)
│   ├── unit/
│   │   ├── __init__.py
│   │   └── test_tools.py             # Tool function tests (11 tests)
│   ├── integration/
│   │   └── __init__.py
│   └── contract/
│       └── __init__.py
├── pyproject.toml                    # Build config (src/ layout)
├── Makefile                          # Standard targets
├── README.md                         # Service documentation
├── .env.example                      # Environment variables
├── structure-before.txt              # Pre-migration state
└── structure-after.txt               # This file

```

---

## Changes Summary

### File Migrations

**Created**:
- `src/tars_mcp_server/__init__.py` - Package docstring
- `src/tars_mcp_server/py.typed` - Type marker
- `tests/__init__.py` - Test package markers (4 files)
- `tests/conftest.py` - Shared fixtures with MQTT mocks
- `tests/unit/test_tools.py` - Tool function tests (11 tests)
- `Makefile` - Standard development targets with venv detection
- `README.md` - Comprehensive service documentation
- `.env.example` - Environment variable documentation with integration notes
- `structure-before.txt` - Pre-migration documentation
- `structure-after.txt` - This file

**Moved**:
- `tars_mcp_server/*.py` → `src/tars_mcp_server/*.py` (3 files)

**Updated**:
- `pyproject.toml` - src/ layout, pytest config, mypy config, dev dependencies
- `src/tars_mcp_server/__main__.py` - Added `-> None` return type
- `src/tars_mcp_server/server.py` - Fixed `Envelope` field names (`type` not `event_type`)

---

## Validation Results

### make check Status

✅ **Format** (ruff + black): PASS  
✅ **Lint** (ruff): PASS  
✅ **Type Check** (mypy): PASS (0 errors in 3 source files)  
✅ **Tests** (pytest): 11 passed (90% coverage)

### Test Coverage

- **server.py**: 100% coverage (all tool functions tested)
- **__main__.py**: 0% coverage (entry point, not critical)
- **Overall**: 90% coverage

### Tests Created

11 unit tests for MCP tool functions:

**adjust_personality_trait** (8 tests):
- Valid trait adjustment
- Invalid value (too low/high)
- Unknown trait name  
- Case-insensitive trait names
- Boundary values (0, 100)
- MQTT publish failure

**get_current_traits** (2 tests):
- Success case
- MQTT failure

**reset_all_traits** (2 tests):
- Success case
- MQTT failure

---

## Type Safety Improvements

### Fixed Issues

1. **__main__.py**: Added `-> None` return type to `main()`
2. **server.py**: Fixed `Envelope` field names (`type` not `event_type`)
3. **mypy configuration**: Added ignore_missing_imports for external packages:
   - `mcp.*` - FastMCP framework
   - `tars.*` - tars-core contracts  
   - `asyncio_mqtt.*` - MQTT client

---

## Key Features

### FastMCP Tools

#### 1. `adjust_personality_trait`
- Validates trait name (18 valid traits)
- Validates value range (0-100)
- Publishes `CharacterTraitUpdate` to MQTT
- Case-insensitive trait names

#### 2. `get_current_traits`
- Queries current trait values
- Publishes `CharacterGetRequest` to MQTT
- Asynchronous query pattern (with note)

#### 3. `reset_all_traits`
- Resets all traits to defaults
- Publishes `CharacterResetTraits` to MQTT

### MQTT Integration

**Published Topics**:
- `character/update` (QoS 1) - Trait updates and resets
- `character/get` (QoS 1) - Query requests

**Envelope Format**:
```python
Envelope(
    type="character.update",  # or "character.get"
    data=payload.model_dump(),
)
```

**Contracts Used**:
- `CharacterTraitUpdate` - Trait change
- `CharacterResetTraits` - Reset request
- `CharacterGetRequest` - Query request
- `Envelope` - MQTT wrapper

---

## Configuration

### pyproject.toml Updates

**Build Configuration**:
```toml
[tool.hatch.build.targets.wheel]
packages = ["src/tars_mcp_server"]
```

**Pytest Configuration**:
```toml
[tool.pytest.ini_options]
pythonpath = ["src"]
asyncio_mode = "auto"
addopts = ["--cov=tars_mcp_server", ...]
```

**Mypy Configuration**:
```toml
[tool.mypy]
python_version = "3.11"
strict = true
mypy_path = "src"

[[tool.mypy.overrides]]
module = ["mcp.*", "tars.*", "asyncio_mqtt.*"]
ignore_missing_imports = true
```

### Dev Dependencies Added

- `pytest-asyncio>=0.23` - Async test support
- `pytest-cov>=4.1` - Coverage reporting
- `pytest-mock>=3.12` - Mocking utilities
- `black>=24.0` - Code formatter
- `types-orjson>=3.6` - Type stubs (fixed version)

---

## Development Workflow

### Makefile Targets

```bash
make fmt      # ruff + black formatting
make lint     # ruff + mypy type checking
make test     # pytest with coverage
make check    # All checks (CI gate) ✅
make clean    # Remove build artifacts
make run      # Run MCP server with stdio
```

### Virtual Environment Detection

Makefile automatically detects and uses `../../.venv/bin/python` if available:
```makefile
VENV_PATH := $(shell pwd)/../../.venv/bin/python
ifneq ($(wildcard $(VENV_PATH)),)
    PYTHON := $(VENV_PATH)
endif
```

---

## Entry Point

**Command**: `tars-mcp-server`  
**Module**: `tars_mcp_server.__main__:main`  
**FastMCP CLI**: Handles stdio/http/sse transports

**Usage**:
```bash
tars-mcp-server stdio         # Claude Desktop integration
tars-mcp-server http --port 8080  # HTTP server
tars-mcp-server sse           # Server-Sent Events
```

---

## Dependencies

### Runtime
- `mcp[cli]>=1.2.0` - FastMCP framework with CLI
- `pydantic>=2.7` - Data validation
- `orjson>=3.9` - Fast JSON serialization
- `python-dotenv>=1.0` - Environment management
- `asyncio-mqtt>=0.16.2` - Async MQTT client
- `tars-core>=0.1.0` - Shared contracts

### Development
- `pytest>=8.0` - Testing framework
- `pytest-asyncio>=0.23` - Async test support
- `pytest-cov>=4.1` - Coverage reporting
- `pytest-mock>=3.12` - Mocking utilities
- `ruff>=0.5` - Fast linter
- `black>=24.0` - Code formatter
- `mypy>=1.10` - Type checker
- `types-orjson>=3.6` - Type stubs

---

## Deployment Notes

### Not Deployed in Docker

`apps/mcp-server` is **not deployed** in Docker Compose. This is intentional because:
1. MCP servers are typically run locally by Claude Desktop via stdio
2. Direct integration with Claude Desktop requires local process
3. No need for containerization for this use case

### Docker File Note

The `docker/specialized/mcp-server.Dockerfile` is for `packages/tars-mcp-character` (a different package), not for `apps/mcp-server`.

**T121-T122 (Docker tasks) marked as N/A** - Service not deployed in containers.

---

## Testing Strategy

### Unit Tests

**Fixture-based testing** with mocked MQTT client:
```python
@pytest.fixture
def mock_mqtt_context(mock_mqtt_client):
    with patch("tars_mcp_server.server.mqtt.Client", return_value=mock_mqtt_client):
        yield mock_mqtt_client
```

**Test coverage**:
- Valid inputs and happy paths
- Invalid inputs (value ranges, trait names)
- Edge cases (boundary values, case sensitivity)
- Error handling (MQTT failures)

### Future Tests

**Integration tests** (not yet implemented):
- End-to-end MQTT message flow
- Memory-worker integration
- Real MQTT broker testing

**Contract tests** (not yet implemented):
- Envelope schema validation
- CharacterTraitUpdate payload validation
- Character state consistency

---

## Known Limitations

### Request-Response Pattern

`get_current_traits()` uses `asyncio.sleep(0.5)` as a placeholder:
```python
await asyncio.sleep(0.5)
return {
    "success": True,
    "note": "Actual values are maintained by memory-worker"
}
```

**Future improvement**: Implement proper correlation ID + Future pattern for immediate responses (like LLM-worker's RAG queries).

---

## Next Steps

**Completed T110-T123**:
- [X] T110: structure-before.txt ✅
- [X] T111-T113: src/ layout created ✅
- [X] T114-T115: tests/ structure organized ✅
- [X] T116: pyproject.toml updated ✅
- [X] T117: Makefile created ✅
- [X] T118: README.md created ✅
- [X] T119: .env.example created ✅
- [X] T120: make check passing ✅
- [N/A] T121-T122: Docker (not deployed)
- [X] T123: structure-after.txt (this file) ✅

**Phase 8b (mcp-server)**: **COMPLETE** ✅

**Phase 9**: memory-worker standardization (T124-T137)

---

**Status**: Phase 8b complete. Service fully standardized, type-safe, tested (11 tests, 90% coverage), ready for Claude Desktop integration.
