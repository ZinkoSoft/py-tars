FROM ubuntu:22.04

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app
ENV LD_LIBRARY_PATH=/usr/lib:$LD_LIBRARY_PATH

# Create application directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    python3-venv \
    portaudio19-dev \
    alsa-utils \
    pulseaudio-utils \
    git \
    wget \
    curl \
    unzip \
    build-essential \
    cmake \
    pkg-config \
    libasound2-dev \
    libportaudio2 \
    libsndfile1 \
    ffmpeg \
    git-lfs \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create and activate virtual environment
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Install core packages for wake activation (using --break-system-packages for Ubuntu 22.04)
RUN pip install --no-cache-dir --break-system-packages \
    "numpy>=1.22.3,<=1.26.4" \
    "scipy>=1.6.0" \
    opencv-python \
    pillow \
    pyaudio \
    "librosa>=0.10.0" \
    soundfile \
    torch \
    tqdm \
    requests \
    pyyaml \
    "pydantic>=2.0.0" \
    "paho-mqtt<2.0" \
    asyncio-mqtt \
    orjson

# Install OpenWakeWord and ONNX runtime
RUN pip install --no-cache-dir --break-system-packages \
    openwakeword \
    onnxruntime

# Install RKNN Toolkit Lite2 for NPU inference
RUN pip install --no-cache-dir --break-system-packages \
    rknn-toolkit-lite2==2.3.2

# Create directories
RUN mkdir -p /app/wake_activation /app/scripts /tmp/tars

# Copy wake activation module (from build context root)
COPY apps/wake-activation/wake_activation/ /app/wake_activation/
COPY apps/wake-activation/pyproject.toml /app/
COPY apps/wake-activation/README.md /app/

# Create entrypoint script with NPU device listing for debugging
RUN cat > /app/entrypoint.sh << 'EOF'
#!/bin/bash
set -e

echo "=== TARS Wake Activation (NPU) Starting ==="

# List available devices for debugging
echo "Available NPU devices:"
ls -la /dev/rknpu 2>/dev/null || echo "  No /dev/rknpu found"
ls -la /dev/dri/renderD* 2>/dev/null || echo "  No DRI render devices found"
ls -la /dev/mali* 2>/dev/null || echo "  No Mali devices found"

echo "Starting wake activation service..."
exec "$@"
EOF

# Create health check script
RUN cat > /app/healthcheck.sh << 'EOF'
#!/bin/bash
# Health check for wake activation service
python3 -c "
import sys
import asyncio
from wake_activation.npu_utils import check_npu_availability

try:
    # Check NPU availability
    is_available, status = check_npu_availability()
    print(f'NPU Status: {\"Available\" if is_available else \"Not Available\"}')
    
    # For now, just check that we can import the wake activation module
    from wake_activation.config import WakeActivationConfig
    config = WakeActivationConfig()
    print(f'Config loaded: NPU enabled = {config.use_npu}')
    
    print('✅ Wake activation health check passed')
    sys.exit(0)
    
except Exception as e:
    print(f'❌ Health check failed: {e}')
    sys.exit(1)
"
EOF

# Make scripts executable
RUN chmod +x /app/entrypoint.sh /app/healthcheck.sh

# Create non-root user for security (matching SenseVoice pattern)
RUN groupadd -f render && \
    useradd -m -u 1000 -s /bin/bash tarsuser && \
    chown -R tarsuser:tarsuser /app && \
    usermod -a -G audio,video,render tarsuser

# Install the wake activation package in development mode
RUN pip install --break-system-packages -e .

# Set up health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/healthcheck.sh

# Switch to non-root user
USER tarsuser

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command
CMD ["python", "-m", "wake_activation"]