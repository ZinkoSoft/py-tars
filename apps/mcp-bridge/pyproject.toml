[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tars-mcp-bridge"
version = "0.1.0"
requires-python = ">=3.11"
dependencies = [
  "asyncio-mqtt>=0.16.2",
  "paho-mqtt<2.0",
  "orjson>=3.11.0",
  "pydantic>=2.7",
  "mcp>=1.2.0",
  "tenacity>=8.4",
  "PyYAML>=6.0",
  "tars-core>=0.1.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "mypy>=1.8.0",
    "black>=24.0.0",
    "ruff>=0.3.0",
]

[project.scripts]
tars-mcp-bridge = "mcp_bridge.__main__:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["mcp_bridge*"]

[tool.setuptools.package-data]
mcp_bridge = ["py.typed"]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"
addopts = "-ra -q --strict-markers --cov=mcp_bridge --cov-report=term-missing"

[tool.coverage.run]
source = ["src/mcp_bridge"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.ruff]
line-length = 120
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = ["E501"]  # line too long (handled by black)

[tool.black]
line-length = 120
target-version = ["py311"]