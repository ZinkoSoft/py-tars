# mcp-bridge Structure Analysis (Before Migration)

**Date**: 2025-10-13
**Phase**: Phase 8 - MCP Services Migration
**Task**: T096

---

## Current Directory Structure

```
apps/mcp-bridge/
├── README.md
├── pyproject.toml                     # Build config (flat layout)
├── mcp_bridge/                        # Source package (flat layout)
│   ├── main.py                        # Entry point (build-time script)
│   ├── config_generator/
│   │   ├── __init__.py
│   │   ├── generator.py               # Config generation logic
│   │   └── writer.py                  # File writing
│   ├── discovery/
│   │   ├── __init__.py
│   │   ├── base.py                    # Base discovery interface
│   │   ├── service.py                 # Main discovery service
│   │   ├── local_packages.py          # packages/ discovery
│   │   ├── extensions.py              # extensions/ discovery
│   │   └── external_config.py         # YAML config discovery
│   └── installation/
│       ├── __init__.py
│       ├── service.py                 # Installation orchestration
│       └── pip_installer.py           # pip install wrapper
├── tests/                             # Tests (flat structure)
│   ├── __init__.py
│   ├── test_config_generator.py
│   ├── test_config_writer.py
│   ├── test_discovery_integration.py
│   ├── test_e2e_installation.py
│   ├── test_e2e_pipeline.py
│   ├── test_installation_service.py
│   ├── test_local_discovery.py
│   ├── test_metadata.py
│   ├── test_pip_installer.py
│   └── test_real_discovery.py
└── examples/                          # Example usage

Total Python files: 24 (13 source + 11 test files)
```

---

## Service Characteristics

**Type**: Build-time script (not a runtime service)
**Purpose**: MCP server discovery, installation, and config generation
**Runtime**: Runs once at Docker build time, then exits
**Output**: Generates `/config/mcp-servers.json` for llm-worker

**Key difference from other services**:
- Not a long-running MQTT service
- No health monitoring or continuous operation
- One-shot execution: discover → install → generate → exit

---

## Current pyproject.toml Layout

```toml
[project]
name = "tars-mcp-bridge"
version = "0.1.0"
requires-python = ">=3.11"
dependencies = [
  "asyncio-mqtt>=0.16.2",
  "paho-mqtt<2.0",
  "orjson>=3.11.0",
  "pydantic>=2.7",
  "mcp>=1.2.0",
  "tenacity>=8.4",
  "PyYAML>=6.0",
  "tars-core>=0.1.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=24.0.0",
    "ruff>=0.3.0",
]

[project.scripts]
mcp-filesystem = "mcp_bridge.servers.filesystem:main"
```

**Issues**:
- No `package-dir` specified (defaults to flat layout)
- No tool configuration (ruff, black, mypy, pytest)
- No entry point for main script (only mcp-filesystem)
- Missing mypy in dev dependencies

---

## Entry Point

**Current**: `mcp_bridge/main.py` with `if __name__ == "__main__"`
**Expected**: `src/mcp_bridge/__main__.py` for `python -m mcp_bridge`

---

## Test Organization

**Current state**:
- Flat structure in `tests/`
- Mix of unit, integration, and e2e tests
- No conftest.py
- No clear organization by test type

**Files by type**:
- **Unit tests**: test_config_generator.py, test_config_writer.py, test_pip_installer.py, test_metadata.py (4)
- **Integration tests**: test_discovery_integration.py, test_installation_service.py, test_local_discovery.py (3)
- **E2E tests**: test_e2e_installation.py, test_e2e_pipeline.py, test_real_discovery.py (3)
- **Unknown**: 1

---

## Dependencies

### Runtime
- asyncio-mqtt, paho-mqtt - MQTT client (may not be needed for build-time script)
- orjson - JSON serialization
- pydantic>=2.7 - Validation
- mcp>=1.2.0 - MCP Python SDK
- tenacity>=8.4 - Retry logic
- PyYAML>=6.0 - YAML config parsing
- tars-core>=0.1.0 - Shared contracts

### Dev
- pytest, pytest-asyncio, pytest-cov, pytest-mock
- black>=24.0.0
- ruff>=0.3.0
- Missing: mypy

---

## Configuration

**Expected files**:
- `.env.example` - Missing (should document environment variables)
- `Makefile` - Missing (should have fmt, lint, test, check targets)

**Environment variables** (from main.py):
- WORKSPACE_ROOT (default: /workspace)
- MCP_LOCAL_PACKAGES_PATH (default: {workspace}/packages)
- MCP_EXTENSIONS_PATH (default: {workspace}/extensions/mcp-servers)
- MCP_SERVERS_YAML (default: {workspace}/ops/mcp/mcp.server.yml)
- MCP_OUTPUT_DIR (default: {workspace}/config)
- MCP_CONFIG_FILENAME (default: mcp-servers.json)

---

## Module Organization

### config_generator/
- `generator.py` - Generates MCPConfig from discovered servers
- `writer.py` - Writes config to JSON file

### discovery/
- `base.py` - Base ServerDiscovery protocol
- `service.py` - Orchestrates all discovery strategies
- `local_packages.py` - Discovers packages/tars-mcp-*
- `extensions.py` - Discovers extensions/mcp-servers/*
- `external_config.py` - Parses ops/mcp/mcp.server.yml

### installation/
- `service.py` - Orchestrates installation with retry and summary
- `pip_installer.py` - Wrapper for pip install operations

---

## Docker Integration

**Current deployment**: Not in compose.yml (runs at build time only)
**Dockerfile**: Uses specialized dockerfile (likely docker/specialized/llm-worker.Dockerfile)
**Execution**: Part of llm-worker build process

---

## Migration Complexity: Medium

**Straightforward**:
- Standard src/ layout migration
- Test organization (clear unit/integration/e2e split)
- Makefile and .env.example creation

**Considerations**:
- Build-time script vs runtime service (different pattern)
- May not need MQTT dependencies (asyncio-mqtt, paho-mqtt)
- Entry point should be `python -m mcp_bridge` or CLI command
- Docker integration is build-time, not runtime compose service

**Estimated effort**: 2-3 hours
**Test count**: 11 test files (need organization + conftest.py)

---

## Compliance Gaps

### Missing from Phase 7 template:
- [ ] src/ layout
- [ ] Organized tests/ with unit/integration/contract subdirectories
- [ ] tests/conftest.py
- [ ] Makefile with standard targets
- [ ] .env.example documenting environment variables
- [ ] pyproject.toml tool configuration (ruff, black, mypy, pytest)
- [ ] Entry point via __main__.py
- [ ] mypy in dev dependencies

### Existing (no changes needed):
- [X] README.md present
- [X] pyproject.toml present
- [X] Core dependencies configured
- [X] Black and ruff in dev dependencies

---

## Notes

1. **Build-time script**: This is not a typical runtime service. It runs once at Docker build time.
2. **MQTT dependencies**: May be unnecessary for build-time script (investigate removal).
3. **Entry point**: Should support both `python -m mcp_bridge` and potential CLI command.
4. **Test organization**: Clear split between unit (4), integration (3), and e2e (3) tests.
5. **No health monitoring**: Build-time script doesn't need system/health/* topics.
6. **Exit codes**: Script uses exit codes (0 for success, 1 for failure) rather than health status.

---

**Status**: Analysis complete. Ready for T097 (create src/ directory structure).
