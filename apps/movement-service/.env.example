# Movement Service Configuration
# Copy to .env and configure for your environment

# ============================================================================
# MQTT Connection
# ============================================================================

# MQTT broker connection string
# Format: mqtt://[username:password@]host:port
MQTT_URL=mqtt://tars:password@localhost:1883

# ============================================================================
# MQTT Topics
# ============================================================================

# Topic for movement test commands (bidirectional)
# Service subscribes here, validates, and forwards to ESP32
# ESP32 also subscribes here for command execution
MOVEMENT_TEST_TOPIC=movement/test

# Topic for movement service health status (retained)
MOVEMENT_HEALTH_TOPIC=system/health/movement

# ============================================================================
# MQTT QoS Settings
# ============================================================================

# QoS level for publishing (0, 1, or 2)
# Default: 1 (at least once delivery)
MOVEMENT_PUBLISH_QOS=1

# ============================================================================
# Logging
# ============================================================================

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# ============================================================================
# ESP32 Integration Notes
# ============================================================================

# The movement-service is a thin MQTT bridge that:
# 1. Subscribes to movement/test topic
# 2. Validates TestMovementRequest messages (Pydantic v2)
# 3. Forwards validated commands to ESP32's movement/test topic
# 4. ESP32 autonomously executes movements and publishes status to movement/status

# Valid commands (TestMovementCommand enum):
# - Basic: reset, step_forward, step_backward, turn_left, turn_right
# - Expressive: wave, laugh, swing_legs, pezz, pezz_dispenser, now, balance, 
#               mic_drop, monster, pose, bow
# - Manual: move_legs, move_arm (require params)
# - Control: disable, stop

# Example TestMovementRequest payload:
# {
#   "command": "wave",
#   "speed": 0.8,           # Optional: 0.1-1.0 (default 1.0)
#   "params": {},           # Optional: for move_legs/move_arm
#   "request_id": "abc123"  # Optional: correlation ID
# }
