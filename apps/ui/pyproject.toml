[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tars-ui"
version = "0.1.0"
description = "Pygame-based UI for TARS voice assistant with spectrum visualization"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
  # Core TARS dependencies
  "asyncio-mqtt>=0.16.2",
  "paho-mqtt<2.0",
  "orjson>=3.10.7",
  "pydantic>=2.6.0",
  
  # UI-specific dependencies
  "pygame>=2.5.2",
  "numpy>=1.26.0,<2.0",
  "PyOpenGL>=3.1.7",
  "websockets>=12.0",
]

[project.optional-dependencies]
dev = [
  # Testing
  "pytest>=8.2",
  "pytest-asyncio>=0.23",
  "pytest-cov>=5.0",
  
  # Code quality
  "black>=24.0",
  "ruff>=0.5",
  "mypy>=1.10",
  
  # Type stubs
  "types-orjson>=3.6",
]

[project.scripts]
tars-ui = "ui.__main__:main"

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["ui", "ui.module"]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
  "E",    # pycodestyle errors
  "W",    # pycodestyle warnings
  "F",    # pyflakes
  "I",    # isort
  "N",    # pep8-naming
  "UP",   # pyupgrade
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "T10",  # flake8-debugger
  "RET",  # flake8-return
  "SIM",  # flake8-simplify
  "ARG",  # flake8-unused-arguments
  "PTH",  # flake8-use-pathlib
  "RUF",  # ruff-specific rules
]
ignore = [
  "E501",    # line too long (handled by black)
  "PLR0913", # too many arguments
  "PLR2004", # magic value comparison
  "N802",    # function name should be lowercase (OpenGL conventions)
  "N803",    # argument name should be lowercase (OpenGL conventions)
  "N806",    # variable name should be lowercase (OpenGL conventions)
  "PTH110",  # os.path.exists -> Path.exists (existing code, low priority)
  "PTH118",  # os.path.join -> Path (existing code, low priority)
  "PTH120",  # os.path.dirname -> Path.parent (existing code, low priority)
  "PTH123",  # open -> Path.open (existing code, low priority)
  "RUF003",  # ambiguous quote character (existing code)
  "RUF046",  # unnecessary int cast (existing code, pygame compatibility)
  "SIM105",  # try-except-pass -> contextlib.suppress (existing code)
  "ARG002",  # unused method argument (protocol/callback signatures)
]

[tool.black]
line-length = 100
target-version = ["py311"]

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false  # UI code has many untyped functions
ignore_missing_imports = true  # Ignore missing stubs for pygame, OpenGL, etc.
check_untyped_defs = false  # Don't check bodies of untyped functions
no_implicit_optional = false  # Allow implicit optional
warn_no_return = false  # pygame/OpenGL code has many dynamic returns

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "-v",
  "--strict-markers",
  "--strict-config",
]
markers = [
  "unit: Unit tests (fast, isolated)",
  "integration: Integration tests (may require external services)",
  "contract: MQTT contract tests (validates message schemas)",
]
